---
variables:

platforms:

  opsmq:
     pack: oneops/activemq:1
  daqdb:
    pack: oneops/cassandra:1
    description: Data Acquisition - Logstash and oneops.1.Cassandra for Perf data
    links:
    - opsmq
    variables:
      distbase: $OO_GLOBAL{DISTBASE}
      install-dir: $OO_GLOBAL{INSTALL-DIR}
      version: $OO_GLOBAL{VERSION}
      sensorpoolsize: $OO_GLOBAL{SENSOR-POOL-SIZE}
    components:
      file/oneops.1.File:
        compact:
          path: /opt/oneops/cassandra_compact.sh
          exec_cmd: chmod +x /opt/oneops/cassandra_compact.sh
          content: |
              #!/bin/bash
              INDEX=`hostname | cut -d '-' -f3`
              TIMESTAMP=`date +"%y%m%d"`
              LOG="/var/log/cassandra/compact-$TIMESTAMP.log"
              SLEEP_TIME=$((($INDEX - 1) * 14400))
              echo "sleep $SLEEP_TIME" > $LOG
              sleep $SLEEP_TIME
              df -k >>$LOG
              date >>$LOG
              time /opt/cassandra/bin/nodetool compact >>LOG 2>&1
              date >>$LOG
              df -k >>$LOG

        daq-join-on-start:
          path: /tmp/t
          exec_cmd: echo "sleep 10; nodetool -h localhost join" > /etc/rc.local
          content: na
        logrotate:
          path: /etc/logrotate.d/oneops-log
          exec_cmd: 'mv /etc/cron.daily/logrotate /etc/cron.hourly/ ; rm -fr /etc/logrotate.d/oneops '
          content: |
            /opt/oneops/log/*.log
            {
              copytruncate
              compress
              size 10M
              rotate 1
              prerotate rm -fr /opt/oneops/log/*.gz
              endscript
            }
        logstash-cert:
          path: /opt/.certs/logstash.crt
        logstash-key:
          path: /opt/.certs/logstash.key
      compute/oneops.1.Compute:
        compute:
          size: XL

      os/oneops.1.Os:
        os:
          hosts:
            daqdb: 127.0.0.1
          additional_search_domains:
          - $OO_GLOBAL{DOMAIN}
      volume/oneops.1.Volume:
        volume:
          size: 100%FREE
          mount_point: /var/lib/cassandra
          fstype: xfs
      cassandra/oneops.1.Cassandra:
        cassandra:
          cluster: TestCluster
          max_heap_size: default
          seed_count: '1'
          num_tokens: '256'
          partitioner: org.apache.cassandra.dht.RandomPartitioner
          version: '2.1.9'
          heap_newsize: default
          endpoint_snitch: org.apache.cassandra.locator.GossipingPropertyFileSnitch
      user/oneops.1.User:
        ooadmin:
          home_directory_mode: '755'
          home_directory: /home/ooadmin
          description: ''
          login_shell: /bin/bash
          ulimit: '16384'
          username: ooadmin
      keyspace/oneops.1.Keyspace:
        keyspace-mdb:
          placement_strategy: NetworkTopologyStrategy
          keyspace_name: mdb
          replication_factor: '2'

      secgroup/oneops.1.Secgroup:
        secgroup: {}
      java/oneops.1.Java:
        java:
          install_dir: /usr/lib/jvm
          version: '8'
      artifact/oneops.1.Artifact:
        collector-artifact:
          install_dir: /opt/oneops/artifact
          password: '::ENCRYPTED::'
          as_user: root
          restart: |
              execute "cp /opt/oneops/artifact/releases/$OO_GLOBAL{VERSION}/oneops/dist/daq-collector-1.0.0.jar /opt/oneops/artifact/releases/$OO_GLOBAL{VERSION}/oneops/dist/daq-1.0.0.jar"

               service "logstash" do
                  action [:enable,:restart]
                  only_if { File.exists?('/etc/init.d/logstash') }
               end

              execute "chmod a+rx /etc/init.d/cassandra"
              execute "cd /opt/oneops; jar xf /opt/oneops/artifact/releases/$OO_GLOBAL{VERSION}/oneops/dist/daq-1.0.0.jar logstash-custom-output-plugin.rb"
               #End of restart
          should_expand: 'true'
          checksum: ''
          location: $OO_LOCAL{distbase}/oneops-daq-$OO_LOCAL{version}.tar.gz
          repository: '*Using full RepoURL*'
          version: $OO_LOCAL{version}
          url: $OO_LOCAL{distbase}/oneops-daq-$OO_LOCAL{version}.tar.gz
          username: not_required
      job/oneops.1.Job:
        job:
          hour: '14'
          month: '*'
          weekday: '5'
          description: compact
          cmd: /opt/oneops/cassandra_compact.sh
          user: root
          day: '*'
          minute: '40'
      daemon/oneops.1.Daemon:
        daemon-cassandra:
          service_name: cassandra
          control_script_location: /etc/init.d/cassandra
          pattern: cassandra
        ntpd:
          service_name: ntpd
          use_script_status: 'true'
          control_script_location: /etc/init.d/ntpd
      logstash/oneops.1.Logstash:
        logstash:
          outputs:
           - if "drop" not in [tags] {     oneopsdaq {codec => json cluster_host_port => "daqdb:9160"  }   }   if "metric" in [tags] { file {   message_format => "%{events.rate_1m}"  path=> "/var/run/logstash_metric"         }    }

          inputs:
           - 'lumberjack {     port => 4000 ssl_certificate => "/opt/.certs/logstash.crt"     ssl_key => "/opt/.certs/logstash.key"   } '
          filters:
           - throttle {     key => "%{host}"     after_count => 2500     period => 30     add_tag => "drop"   }  metrics { meter => "events" add_tag => "metric"   }
          version: 1.5.3
          attachments:
            daq-env-variables:
              headers: ''
              path: /etc/default/logstash
              basic_auth_user: ''
              exec_cmd: ''
              basic_auth_password: '::ENCRYPTED::'
              checksum: ''
              source: ''
              priority: '1'
              content: |
                  export KLOOPZ_AMQ_PASS=amqsecret
                  export UOPTS=-Dpoolsize=$OO_LOCAL{sensorpoolsize}
                  export UOPTS="$UOPTS -Doo.cassandra.client.active_clients=128"
                  export UOPTS="$UOPTS -Doo.cassandra.client.timeout=5000"
                  export UOPTS="$UOPTS -Doo.cassandra.client.auto_discovery=true"
                  export LS_HEAP_SIZE=1000m
                  export LS_JAVA_OPTS="$UOPTS"
                  export LS_WORKER_THREADS=100
              run_on: before-add,after-replace,before-update
            logstash-oneops-output-plugin:
              headers: ''
              path: /opt/oneops/copy_ls_daq_output_plugin.sh
              basic_auth_password: '::ENCRYPTED::'
              basic_auth_user: ''
              exec_cmd: "chmod +x /opt/oneops/copy_ls_daq_output_plugin.sh;
                         /opt/oneops/copy_ls_daq_output_plugin.sh;"
              checksum: ''
              source: ''
              priority: '1'
              content: |
                mkdir -p /opt/logstash/vendor/jar/oneopsdaq-1.0.0/lib;
                mkdir -p /opt/logstash/lib/logstash/outputs;
                cp /opt/oneops/logstash-custom-output-plugin.rb /opt/logstash/lib/logstash/outputs/oneopsdaq.rb ;
                cp /opt/oneops/logstash-custom-output-plugin.rb /opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-core-1.5.3-java/lib/logstash/outputs/oneopsdaq.rb
                sudo service logstash restart;

              run_on: after-add,after-replace,after-update
      haproxy/oneops.1.Haproxy:
        haproxy:
          stats_socket_location: /var/lib/haproxy/stats
          listeners:
            '5000': '4000'
          maxconn_defaults: '32000'
          timeout_connect: 500s
          timeout_client: 60s
          maxconn_server: '1500'
          lbmethod: roundrobin
          retries: '3'
          stats_web_port: '1936'
          timeout_server: 60s
          check_port : 4000
          options:
          - dontlognull
          - redispatch
          lbmode: tcp
          enable_stats_socket: 'true'
  daq:
    pack: oneops/tomcat:1
    links:
     - daqdb
    variables:
        deploycontext: daq
        version: $OO_GLOBAL{VERSION}
        notifypass: '::ENCRYPTED::'
        ecv-user: $OO_GLOBAL{ECV-USER}
        ecv-secret: $OO_GLOBAL{ECV-SECRET}
        tomcatloglocation: $OO_GLOBAL{TOMCATLOGLOCATION}
        tomcatheapdumppath: $OO_GLOBAL{TOMCATHEAPDUMPPATH}
        tomcatgclog: $OO_GLOBAL{TOMCATGCLOG}
        tomcat-access-log-format: $OO_GLOBAL{TOMCAT-ACCESS-LOG-FORMAT}
        domain-alias: $OO_GLOBAL{DOMAIN-ALIAS}
        cms-db-host: $OO_GLOBAL{CMS-DB-HOST}
        cms-db-user: $OO_GLOBAL{CMS-DB-USER}
        cms-db-pass: $OO_GLOBAL{CMS-DB-PASS}
        api-user: $OO_GLOBAL{API-USER}
        api-secret: $OO_GLOBAL{API-SECRET}
        distbase: $OO_GLOBAL{DISTBASE}
        install-dir: $OO_GLOBAL{INSTALL-DIR}
        cms-des-file-location: $OO_GLOBAL{CMS-DES-FILE-LOCATION}
        cms-db-des-key: $OO_GLOBAL{CMS-DB-DES-KEY}
        daq-db: $OO_GLOBAL{DAQ-DB}
        daq-version: 1.0.0
    components:
      tomcat/oneops.1.Tomcat:
        tomcat:
          polling_frequency_post_startup_check: '1'
          pre_shutdown_command: curl -s --connect-timeout 5 --max-time 5  -u $OO_LOCAL{ecv-user}:$OO_LOCAL{ecv-secret}
            -X PUT  http://localhost:8080/$OO_LOCAL{deploycontext}/rest/ecv/status/shutdown
          install_type: binary
          mem_start: 2048m
          protocol: HTTP/1.1
          system_properties:
            sun.net.spi.nameservice.provider.2: default
            sun.net.spi.nameservice.provider.1: dns,sun
            oneops.url: https://$OO_LOCAL{domain-alias}
            oo.cassandra.client.active_clients: 6
            oo.cassandra.client.timeout: 5000
          post_startup_command: |
              #!/bin/sh
              function check_ecv_status {
                  if [  -f "/opt/tomcat7/webapps/$OO_LOCAL{deploycontext}.war" ]; then
                  time_to_wait=5
                  no_of_retries=13
                      for (( i = 1; i <= no_of_retries; i++ )); do
                          response=$(curl -s --connect-timeout 5 --max-time 5 -o /dev/null -w "%{http_code}" $1)
                              if [ -z $response ] || [ $response -ne 200 ]; then
                                  if [ $i -eq 13 ]; then
                                      echo "failure.. response code is $response on $1.. maximum retries happened.. exiting with failure"
                                      exit 1
                                  fi
                              echo "failure.. response code is $response on $1"
                              echo -e "sleeping $time_to_wait seconds.. retry $i of $((no_of_retries-1))"
                              sleep $time_to_wait
                              continue
                              elif [ $response -eq 200 ]; then
                                  echo "success.. response code is $response on $1.. exiting with success"
                                  exit 0
                              fi
                      done
                  else
                      echo "Web app $OO_LOCAL{deploycontext} does not exit.. unable to check ecv status. exiting"
                      exit 0
                  fi
              }
              check_ecv_status http://localhost:8080/$OO_LOCAL{deploycontext}/rest/ecv/status
          java_options: -d64 -server -Xloggc:$OO_LOCAL{tomcatgclog}
          logfiles_path: $OO_LOCAL{tomcatloglocation}
          max_number_of_retries_for_post_startup_check: '2'
          ssl_port: '8443'
          startup_params:
          - +UseParallelOldGC
          - PermSize=256m
          - MaxPermSize=256m
          - +UseCompressedOops
          - SurvivorRatio=10
          - SoftRefLRUPolicyMSPerMB=125
          - +HeapDumpOnOutOfMemoryError
          - HeapDumpPath=$OO_LOCAL{tomcatheapdumppath}
          - CompileThreshold=1500
          - +UseGCLogFileRotation
          - NumberOfGCLogFiles=10
          - GCLogFileSize=10M
          - +PrintGCDateStamps
          - +DisableExplicitGC
          - +PrintGCApplicationStoppedTime
          policy: "grant codeBase \"file:${catalina.base}/webapps/-\" {\r\n        permission
            java.security.AllPermission;\r\n};\r\n"
          mirrors: []
          access_log_pattern: $OO_LOCAL{tomcat-access-log-format}
          advanced_connector_config:
            connectionTimeout: '20000'
            maxKeepAliveRequests: '100'
          build_version: '62'
          access_log_dir: $OO_LOCAL{tomcatloglocation}
          webapp_install_dir: /opt/tomcat7/webapps
          version: '7.0'
          ajp_port: '8009'
          environment:
            CMS_DB_HOST: $OO_LOCAL{cms-db-host}
            CMS_DB_USER: $OO_LOCAL{cms-db-user}
            CMS_DB_PASS: $OO_LOCAL{cms-db-pass}
            ECV_USER: $OO_LOCAL{ecv-user}
            ECV_SECRET: $OO_LOCAL{ecv-secret}
            API_USER: $OO_LOCAL{api-user}
            API_SECRET: $OO_LOCAL{api-secret}
            CMS_DES_PEM: $OO_LOCAL{cms-des-file-location}
            DAQ_DB: $OO_LOCAL{daq-db}
          port: '8080'
          mem_max: 4096m
          tomcat_install_dir: /opt
          server_port: '8005'
          attachments:
            cms-cert:
              path: /tmp/download_file
              headers: ''
              basic_auth_user: ''
              exec_cmd: |
                CERT_FILE=$OO_LOCAL{cms-des-file-location}
                CERT_DIR=$OO_LOCAL{install-dir}/certs/
                mkdir -p $CERT_DIR
                echo $OO_LOCAL{cms-db-des-key}>$CERT_DIR/oo.key
              basic_auth_password: '::ENCRYPTED::'
              checksum: ''
              source: ''
              priority: '1'
              content: ''
              run_on: before-add,before-replace,before-update
      daemon/oneops.1.Daemon:
        daemon-tomcat:
          service_name: tomcat7
          use_script_status: 'true'
          control_script_location: /etc/init.d/tomcat7
          pattern: tomcat
      artifact/oneops.1.Artifact:
        app:
          install_dir: /opt/oneops/artifact
          password: '::ENCRYPTED::'
          restart: |
                node.set["oneops"] = {

                              :home => "/usr/local/oneops",
                            :install_dir => "/usr/local/oneops"
                          }
                          node.set["tomcat"] = {
                            :webapp_dir => "/opt/tomcat7/webapps"
                          }
                          tomcat_user = "tomcat"
                          daq_log = "/opt/oneops/log/daq.log"
                          execute "mkdir -p #{File.dirname(daq_log)};chmod +wx #{File.dirname(daq_log)} ;"
                          file "#{daq_log}" do
                             owner tomcat_user
                             group tomcat_user
                             action :create
                             not_if { File.file?(daq_log) }
                           end

                          execute "rm -f /usr/local/oneops/dist"

                          link "/usr/local/oneops/dist" do
                            to "/opt/oneops/artifact/releases/$OO_LOCAL{version}/oneops/dist"
                          end

                          # war cleanup and deploy
                          ["$OO_LOCAL{deploycontext}"].each do |war|

                            execute "#{war} war clean" do
                               command "rm -fr #{node[:tomcat][:webapp_dir]}/#{war}*"
                            end
                            execute "#{war} war deploy" do
                               command "cp #{node[:oneops][:home]}/dist/#{war}*.war #{node[:tomcat][:webapp_dir]}/$OO_LOCAL{deploycontext}-$OO_LOCAL{daq-version}.war"
                            end

                          end

                          service "tomcat7" do
                            action :restart
                          end
                #End of restart

          should_expand: 'true'
          checksum: ''
          location: $OO_LOCAL{distbase}/oneops-daq-api-$OO_LOCAL{daq-version}-$OO_LOCAL{version}.tar.gz
          repository: '*Using full RepoURL*'
          version: $OO_LOCAL{version}
          url: $OO_LOCAL{distbase}/oneops-daq-api-$OO_LOCAL{daq-version}-$OO_LOCAL{version}.tar.gz
          username: not_required
          attachments:
            disableECV:
              headers: ''
              path: /tmp/download_file
              basic_auth_user: ''
              exec_cmd: curl -v  -u $OO_LOCAL{ecv-user}:$OO_LOCAL{ecv-secret} -X
                PUT  http://localhost:8080/$OO_LOCAL{deploycontext}/rest/ecv/status/offline
              basic_auth_password: '::ENCRYPTED::'
              checksum: ''
              source: ''
              priority: '1'
              content: ''
              run_on: on-demand
            enableECV:
              path: /tmp/download_file
              headers: ''
              basic_auth_password: '::ENCRYPTED::'
              exec_cmd: curl -v   -u $OO_LOCAL{ecv-user}:$OO_LOCAL{ecv-secret} -X
                PUT  http://localhost:8080/$OO_LOCAL{deploycontext}/rest/ecv/status/online
              basic_auth_user: ''
              checksum: ''
              source: ''
              priority: '1'
              content: ''
              run_on: on-demand
      lb/oneops.1.Lb:
       lb:
        listeners:
         - http 8080 http 8080
        ecv_map:
          '8080': GET /$OO_LOCAL{deploycontext}-$OO_LOCAL{daq-version}/rest/ecv/status

      fqdn/oneops.1.Fqdn:
       fqdn:
        aliases:
         - daqws
      keystore/oneops.1.Keystore:
        keystore:
          keystore_password: '::ENCRYPTED::'
          keystore_filename: /var/lib/certs/keystore.jks
      certificate/oneops.1.Certificate:
        certificate: {}
      user/oneops.1.User:
        ooadmin:
          home_directory_mode: '755'
          home_directory: /home/ooadmin
          ulimit: '16384'
          username: ooadmin
