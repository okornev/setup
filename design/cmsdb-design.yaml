---
variables:

platforms:
 cmsdb:
     pack: oneops/postgresql:1
     variables:
        distbase: $OO_GLOBAL{DISTBASE}
        install-dir: $OO_GLOBAL{INSTALL-DIR}
        cms-db-version: $OO_GLOBAL{VERSION}
        backup-host: $OO_GLOBAL{BACKUP-HOST}
        cms-db-user: $OO_GLOBAL{CMS-DB-USER}
        cms-db-pass: $OO_GLOBAL{CMS-DB-PASS}
        perf-user-pass: '::ENCRYPTED::'
     components:
       compute/oneops.1.Compute:
          compute:
            size: L
       postgresql/oneops.1.Postgresql:
         postgresql:
           port: '5432'
           postgresql_conf:
             tcp_keepalives_count: '5'
             tcp_keepalives_idle: '60'
             tcp_keepalives_interval: '5'
             max_connections: '1000'
           version: '9.2'
       user/oneops.1.User:
        ooadmin:
          home_directory_mode: '755'
          home_directory: /home/ooadmin
          ulimit: '16384'
          username: ooadmin
       volume/oneops.1.Volume:
         volume:
           size: 100%FREE
           mount_point: /db
           fstype: xfs
       database/oneops.1.Database:
         database:
           dbname: kloopzdb
           username: $OO_LOCAL{cms-db-user}
           password: 'changeme'
       artifact/oneops.1.Artifact:
         db-artifact:
           install_dir: $OO_LOCAL{install-dir}
           as_user: root
           restart: |
            # disable this on secondary clouds in transition

            conf = { :home => '/usr/local/oneops' }
            node.set["oneops"] = conf

            directory "#{node[:oneops][:home]}" do
              recursive true
            end

            bash "cms db schema" do
              cwd node[:oneops][:home]
              code <<-EOH
               tar zxf $OO_LOCAL{install-dir}/current/cms-db-pkg/db.tar.gz --no-same-owner --no-same-permissions
               cd db
               ./autoinstall-db.sh $OO_LOCAL{cms-db-user} $OO_LOCAL{cms-db-pass} > autoinstall-db.log 2>&1
              EOH
            end
           as_group: root
           location: $OO_LOCAL{distbase}/cms-db-pkg-$OO_LOCAL{cms-db-version}.tar.gz
           repository: pangaea_releases
           version: $OO_LOCAL{cms-db-version}
           url: $OO_LOCAL{distbase}/cms-db-pkg-$OO_LOCAL{cms-db-version}.tar.gz
       file/oneops.1.File:
         pg-snapshot-chef-conf:
           path: /home/ooadmin/chef.conf
           content: |
            cookbook_path "/home/oneops/components/cookbooks"
            lockfile "/tmp/chef-snapshot.lock"
            file_cache_path "/tmp"
            log_level :info
         pg-snapshot-json:
           path: /home/ooadmin/pg.snapshot.json
           exec_cmd: mkdir -p /db/backups/outbound
           content: |
               {
                 "mgmt_domain": "",
                 "customer_domain": "",
                 "run_list": [
                   "recipe[postgresql::snapshot]"
                 ],
                 "workorder": {
                   "ci": {
                     "ciAttributes": {
                       "postgresql_conf": "{\"data_directory\":\"\u0027/db/pg\u0027\"}"
                     },
                     "ciName": "pg",
                     "ciClassName": "bom.Postgresql"
                   },
                   "payLoad": {
                     "Environment" : [ { "ciName" : "$OO_GLOBAL{env_name}" } ]
                   },
                   "arglist": "{\"bucket\":\"db-backup\",\"label\":\"$OO_GLOBAL{env_name}-cmsdb\",\"local_path\":\"/db/backups/outbound\"}"
                 },
                 "name": "pg",
                 "postgresql": {
                   "postgresql_conf": "{\"data_directory\":\"\u0027/db/pg\u0027\"}"
                 },
                 "app_name": "postgresql"
               }
           depends:
           - pg-snapshot-wrapper
         pg-snapshot-wrapper:
           path: /home/ooadmin/pg-snapshot-wrapper.sh
           exec_cmd: chmod +x /home/ooadmin/pg-snapshot-wrapper.sh
           content: |
               #!/bin/bash

               # xargs to trim
               is_standby=`sudo -u postgres psql -t -c "SELECT pg_is_in_recovery();"|xargs`

               echo "is_standby=$is_standby"
               if [ $is_standby = "t" ]; then
                 echo "skipping because is standby"
                 exit
               fi

               /usr/bin/chef-solo -c /home/ooadmin/chef.conf -j /home/ooadmin/pg.snapshot.json 2>&1 >/dev/null ; scp /db/backups/outbound/snapshot* ooadmin@$OO_LOCAL{backup-host}:~/backup/  ; rm -fr /db/backups/outbound/snapshot*

           depends:
           - pg-snapshot-chef-conf
         pgservice-conf:
           path: /var/spool/nagios/.pg_service.conf
           exec_cmd: chmod 600 /var/spool/nagios/.pg_service.conf; chown nagios:nagios
             /var/spool/nagios/.pg_service.conf
           content: |
               [kloopzdb]
               host=localhost
               port=5432
               dbname=kloopzdb
               user=perfstat
               password=$OO_LOCAL{perf-user-pass}
         stuck-deployment-in-prog-stats:
           path: /etc/nagios3/stuck_dpmt_in_prog_stats.yaml
           content: |
                connection:
                  type: pg
                  host: localhost
                  port: 5432
                  user: $OO_LOCAL{cms-db-user}
                  pass: $OO_LOCAL{cms-db-pass}
                  db: kloopzdb

                metrics:
                  - key: in_prog_stuck_dpmts
                    sql: select count(*) in_prog_stuck_dpmts from (select d.deployment_id as deploymentId, round((extract(epoch from (now() - max(dr.updated))) / 60)) as stuckMinsBack,
                         max(dr.updated) as stuckAt
                         from dj_deployment d, dj_deployment_rfc dr
                         where d.state_id = 100
                         and d.deployment_id = dr.deployment_id
                         group by d.deployment_id) as aggr where stuckMinsBack > 7
         stuck-deployment-paused-stats:
           path: /etc/nagios3/stuck_dpmt_paused_stats.yaml
           content: |
               connection:
                 type: pg
                 host: localhost
                 port: 5432
                 user: $OO_LOCAL{cms-db-user}
                 pass: $OO_LOCAL{cms-db-pass}
                 db: kloopzdb

               metrics:
                 - key: in_prog_stuck_dpmts
                   sql: select count(*) in_prog_stuck_dpmts from (select d.deployment_id as deploymentId, round((extract(epoch from (now() - max(dr.updated))) / 60)) as stuckMinsBack,
                        max(dr.updated) as stuckAt
                        from dj_deployment d, dj_deployment_rfc dr
                        where d.state_id = 100
                        and d.deployment_id = dr.deployment_id
                        group by d.deployment_id) as aggr where stuckMinsBack > 7
         stuck-deployment-stats:
           path: /etc/nagios3/stuck_dpmt_stats.yaml
           content: |
               connection:
                 type: pg
                 host: localhost
                 port: 5432
                 user: $OO_LOCAL{cms-db-user}
                 pass: $OO_LOCAL{cms-db-pass}
                 db: kloopzdb

               metrics:
                 - key: stuck_deployments
                   sql: select count(*) stuck_deployments from (select d.deployment_id, round((extract(epoch from (now() - max(dr.updated))) / 60)) as stuck_min_back,
                        max(dr.updated) as stuck_at from dj_deployment d, dj_deployment_rfc dr
                        where d.state_id = 100
                        and d.deployment_id = dr.deployment_id
                        and dr.state_id in (200,300)
                        and not exists (select 1 from dj_deployment_rfc where deployment_id = d.deployment_id and state_id = 100)
                        group by d.deployment_id) as aggr where stuck_min_back > 10
       job/oneops.1.Job:
         full-backup-job:
           month: '*'
           hour: '*/4'
           weekday: '*'
           description: full-backup-job
           cmd: /home/ooadmin/pg-snapshot-wrapper.sh
           user: root
           day: '*'
           minute: '12'

       lb/oneops.1.Lb:
         lb:
          listeners:
            - tcp 5432 tcp 5432
          ecv_map:
            '5432': GET /NOTUSED
