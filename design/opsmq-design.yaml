---
variables:

platforms:

  # amq
  opsmq:
    pack: oneops/activemq:1
    major_version: 1

    variables:
        amqpass: '::ENCRYPTED::'
    components:
      secgroup/oneops.1.Secgroup:
        secgroup:
          inbound:
          - 22 22 tcp 0.0.0.0/0
          - 61616 61617 tcp 0.0.0.0/0
          - 8161 8162 tcp 0.0.0.0/0
      compute/oneops.1.Compute:
        compute:
          size: L
          ostype: centos-7.2
      java/oneops.1.Java:
        java:
          install_dir: /usr/lib/jvm
          jrejdk: server-jre
          version: '8'
      activemq/oneops.1.Activemq:
        activemq:
          version: 5.13.2
          brokerauthenabled: 'true'
          maxmemory: '4096'
          adminconsolesecure: 'true'
          initmemory: '4096'
          environment:
            KLOOPZ_AMQ_PASS: $OO_LOCAL{amqpass}
          brokerusername: system
          transportconnector:
            nio: nio://0.0.0.0:61616
          authenabled: 'true'
          adminconsolesecure: 'false'
          adminconsoleport: '8162'
          adminusername: admin
          attachments:
            activemq-config:
              path: /opt/activemq/conf/activemq.xml
              exec_cmd: |-
                  data='/opt/activemq/data'
                  if [ ! -L $data ]; then
                    service activemq stop
                    rm -rf /opt/activemq/data
                    cd /opt/activemq/
                    ln -sF /data data
                    service activemq start
                  else
                    service activemq restart
                  fi
              priority: '1'
              content: |-
               <!--
                Licensed to the Apache Software Foundation (ASF) under one or more
                contributor license agreements. See the NOTICE file distributed with
                this work for additional information regarding copyright ownership.
                The ASF licenses this file to You under the Apache License, Version 2.0
                (the "License"); you may not use this file except in compliance with
                the License. You may obtain a copy of the License at

                http://www.apache.org/licenses/LICENSE-2.0

                Unless required by applicable law or agreed to in writing, software
                distributed under the License is distributed on an "AS IS" BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                See the License for the specific language governing permissions and
                limitations under the License.
               -->
               <!-- START SNIPPET: example -->
               <beans
                       xmlns="http://www.springframework.org/schema/beans"
                       xmlns:amq="http://activemq.apache.org/schema/core"
                       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                                           http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">


                   <!-- Allows us to use system properties as variables in this configuration file -->
                   <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                       <property name="locations">
                           <value>file:${activemq.base}/conf/credentials.properties</value>
                       </property>
                   </bean>


                   <!--
                    The <broker> element is used to configure the ActiveMQ broker.
                   -->
                   <broker xmlns="http://activemq.apache.org/schema/core" brokerName="opsmq" useJmx="true"
                           dataDirectory="${activemq.data}">

                       <!--
                                 For better performances use VM cursor and small memory limit.
                                 For more information, see:

                        http://activemq.apache.org/message-cursors.html

                        Also, if your producer is "hanging", it's probably due to producer flow control.
                        For more information, see:
                        http://activemq.apache.org/producer-flow-control.html
                       -->

                       <destinationPolicy>
                           <policyMap>
                               <policyEntries>
                                   <policyEntry topic=">" producerFlowControl="false">
                                       <pendingSubscriberPolicy>
                                           <vmCursor/>
                                       </pendingSubscriberPolicy>
                                   </policyEntry>
                                   <policyEntry queue=">" producerFlowControl="false">
                                       <pendingQueuePolicy>
                                           <vmQueueCursor/>
                                       </pendingQueuePolicy>
                                   </policyEntry>
                               </policyEntries>
                           </policyMap>
                       </destinationPolicy>


                       <!--
                        The managementContext is used to configure how ActiveMQ is exposed in
                        JMX. By default, ActiveMQ uses the MBean server that is started by
                        the JVM. For more information, see:

                        http://activemq.apache.org/jmx.html
                       -->
                       <managementContext>
                           <managementContext createConnector="false"/>
                       </managementContext>

                       <!--
                        Configure message persistence for the broker. The default persistence
                        mechanism is the KahaDB store (identified by the kahaDB tag).
                        For more information, see:

                        http://activemq.apache.org/persistence.html
                       -->
                       <persistenceAdapter>
                           <kahaDB directory="${activemq.data}/kahadb"/>
                       </persistenceAdapter>

                       <systemUsage>
                           <systemUsage sendFailIfNoSpace="true">
                               <memoryUsage>
                                   <memoryUsage limit="2 gb"/>
                               </memoryUsage>
                               <storeUsage>
                                   <storeUsage limit="20 gb"/>
                               </storeUsage>
                               <tempUsage>
                                   <tempUsage limit="2 gb"/>
                               </tempUsage>
                           </systemUsage>
                       </systemUsage>

                       <!--
                            The transport connectors expose ActiveMQ over a given protocol to
                            clients and other brokers. For more information, see:

                            http://activemq.apache.org/configuring-transports.html
                       -->
                       <transportConnectors>
                           <transportConnector name="nio" uri="nio://0.0.0.0:61616"/>
                       </transportConnectors>

                       <!-- destroy the spring context on shutdown to stop jetty -->
                       <shutdownHooks>
                           <bean xmlns="http://www.springframework.org/schema/beans"
                                 class="org.apache.activemq.hooks.SpringContextHook"/>
                       </shutdownHooks>

                   </broker>

                   <!--
                    Enable web consoles, REST and Ajax APIs and demos
                    It also includes Camel (with its web console), see ${ACTIVEMQ_HOME}/conf/camel.xml for more info

                    Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
                   -->
                   <import resource="jetty.xml"/>

               </beans>
                       <!-- END SNIPPET: example -->
              run_on: after-add,after-replace,after-update
