---
variables:

platforms:

# searchmqdb
  searchmqdb:
    pack: oneops/postgresql:1
    major_version: 1
    variables:
      dbuser: $OO_GLOBAL{SEARCHMQDBUSER}
      dbpass: $OO_GLOBAL{SEARCHMQDBPASSWORD}
      searchmqdb: $OO_GLOBAL{SEARCHMQDB}
    components:
      secgroup/oneops.1.Secgroup:
        secgroup:
          inbound:
            - '22 22 tcp 0.0.0.0/0'
            - '5432 5432 tcp 0.0.0.0/0'
      compute/oneops.1.Compute:
        compute:
          size: M
          ostype: centos-7.2
          repo_list:
           - 'yum -y localinstall https://download.postgresql.org/pub/repos/yum/9.2/redhat/rhel-7-x86_64/pgdg-centos94-9.2-2.noarch.rpm'
      postgresql/oneops.1.Postgresql:
        postgresql:
          version: 9.2
          postgresql_conf:
            tcp_keepalives_count: 5
            tcp_keepalives_idle: 60
            tcp_keepalives_interval: 5
            max_connections: 1000
      database/oneops.1.Database:
        database:
          password: 'changeme'
          dbname: $OO_LOCAL{searchmqdb}
          username: $OO_LOCAL{dbuser}

      lb/oneops.1.Lb:
        lb:
         listeners:
          - tcp 5432 tcp 5432
         ecv_map:
           '5432': GET /NOTUSED

  # amq
  searchmq:
    pack: oneops/activemq:1
    major_version: 1
    links:
      - searchmqdb
    variables:
      distbase: $OO_GLOBAL{DISTBASE}
      version: $OO_GLOBAL{VERSION}
      broker-cert-location: /var/lib/certs/broker.ks
      broker-cert-pass: change*me
      adminpass: change*me
      amqpass: $OO_GLOBAL{AMQPASS}
      dbuser: $OO_GLOBAL{SEARCHMQDBUSER}
      dbpass: $OO_GLOBAL{SEARCHMQDBPASSWORD}
      searchmqdb: $OO_GLOBAL{SEARCHMQDB}

    components:
      secgroup/oneops.1.Secgroup:
        secgroup:
          inbound:
          - 22 22 tcp 0.0.0.0/0
          - 61616 61617 tcp 0.0.0.0/0
          - 8161 8162 tcp 0.0.0.0/0
      compute/oneops.1.Compute:
        compute:
          size: M
          ostype: centos-7.2
      certificate/oneops.1.Certificate:
        broker-cert:
          cacertkey:
          passphrase:
          cert:
          key:
      keystore/oneops.1.Keystore:
        broker-keystore:
          keystore_password: $OO_LOCAL{broker-cert-pass}
          keystore_filename: $OO_LOCAL{broker-cert-location}
      queue/oneops.1.Queue:
        queue-search:
          queuename: search.stream
      java/oneops.1.Java:
        java:
          install_dir: /usr/lib/jvm
          jrejdk: server-jre
          version: '8'
      activemq/oneops.1.Activemq:
        activemq:
          version: 5.13.2
          brokerauthenabled: 'true'
          maxmemory: '4096'
          adminconsolesecure: 'false'
          initmemory: '4096'
          adminconsolekeystorepassword: $OO_LOCAL{adminpass}
          brokerpassword: $OO_LOCAL{broker-cert-pass}
          adminpassword: changeme
          environment:
            KLOOPZ_AMQ_PASS: $OO_LOCAL{amqpass}
          brokerusername: system
          adminconsolekeystore: $OO_LOCAL{broker-cert-location}
          transportconnector:
            nio: nio://0.0.0.0:61616
            nio+ssl: nio+ssl://0.0.0.0:61617
          authenabled: 'true'
          adminconsoleport: '8162'
          adminusername: admin
          attachments:
            pg-libs:
              path: /tmp/get_pg_libs.sh
              exec_cmd: service activemq restart
              priority: '1'
              content: |-
                  curl -L -o /opt/activemq/lib/jackson-core-asl-1.8.11.jar $OO_CLOUD{nexus}/nexus/content/repositories/public/org/codehaus/jackson/jackson-core-asl/1.8.11/jackson-core-asl-1.8.11.jar
                  curl -L -o /opt/activemq/lib/jackson-mapper-asl-1.8.11.jar $OO_CLOUD{nexus}/nexus/content/repositories/public/org/codehaus/jackson/jackson-mapper-asl/1.8.11/jackson-mapper-asl-1.8.11.jar
                  curl -L -o /opt/activemq/lib/postgresql-9.0-801.jdbc4.jar $OO_CLOUD{nexus}/nexus/content/repositories/public/postgresql/postgresql/9.0-801.jdbc4/postgresql-9.0-801.jdbc4.jar
              exec_cmd: |-
                chmod 777 /tmp/get_pg_libs.sh
                /tmp/get_pg_libs.sh
                service activemq restart
              priority: '2'
              run_on: after-add,after-replace,after-update

            activemq-config:
              path: /opt/activemq/conf/activemq.xml
              exec_cmd: service activemq restart
              priority: '1'
              content: |-
                <beans
                  xmlns="http://www.springframework.org/schema/beans"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

                    <!-- Allows us to use system properties as variables in this configuration file -->
                    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                        <property name="locations">
                            <value>file:${activemq.conf}/credentials.properties</value>
                        </property>
                    </bean>

                    <bean id="postgres-ds" class="org.postgresql.ds.PGPoolingDataSource" destroy-method="close">
                        <property name="serverName" value="searchmqdb.$OO_GLOBAL{DOMAIN}"/>
                        <property name="databaseName" value="$OO_LOCAL{searchmqdb}"/>
                        <property name="portNumber" value="5432"/>
                        <property name="user" value="$OO_LOCAL{dbuser}"/>
                        <property name="password" value="$OO_LOCAL{dbpass}"/>
                        <property name="dataSourceName" value="postgres"/>
                        <property name="initialConnections" value="5"/>
                        <property name="maxConnections" value="30"/>
                        <property name="tcpKeepAlive" value="true"/>
                    </bean>

                    <bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                        <property name="supportedMediaTypes" value="application/json"/>
                    </bean>

                    <bean class="org.springframework.web.client.RestTemplate" id="restTemplate">
                        <property name="messageConverters">
                            <list>
                                <ref bean="jsonMessageConverter"/>
                            </list>
                        </property>
                    </bean>

                    <!--
                        The <broker> element is used to configure the ActiveMQ broker.
                    -->
                    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" useJmx="true"
                            dataDirectory="${activemq.data}">

                        <destinationPolicy>
                            <policyMap>
                                <policyEntries>
                                    <policyEntry topic=">" producerFlowControl="false" memoryLimit="512mb">
                                        <pendingSubscriberPolicy>
                                            <vmCursor/>
                                        </pendingSubscriberPolicy>
                                    </policyEntry>
                                    <policyEntry queue=">" producerFlowControl="false" usePrefetchExtension="false">
                                    </policyEntry>
                                </policyEntries>
                            </policyMap>
                        </destinationPolicy>

                        <destinations>
                            <queue physicalName="search.stream"/>
                        </destinations>

                        <!--
                            The managementContext is used to configure how ActiveMQ is exposed in
                            JMX. By default, ActiveMQ uses the MBean server that is started by
                            the JVM. For more information, see:

                            http://activemq.apache.org/jmx.html
                        -->
                        <managementContext>
                            <managementContext createConnector="false"/>
                        </managementContext>

                        <!--
                            Configure message persistence for the broker. The default persistence
                            mechanism is the KahaDB store (identified by the kahaDB tag).
                            For more information, see:

                            http://activemq.apache.org/persistence.html
                        -->
                        <persistenceAdapter>
                            <jdbcPersistenceAdapter dataSource="#postgres-ds" lockKeepAlivePeriod="5000">
                                <locker>
                                        <lease-database-locker lockAcquireSleepInterval="10000" leaseHolderId="${ONEOPS_COMPUTE_CI_ID}"/>
                                </locker>
                                <statements>
                                    <statements>
                                        <property xmlns="http://www.springframework.org/schema/beans" name="createSchemaStatements">
                                            <list>

                                                <value>CREATE TABLE ACTIVEMQ_MSGS
                                                    (ID BIGINT NOT NULL,
                                                    PRIORITY BIGINT,
                                                    XID VARCHAR(250),
                                                    CONTAINER VARCHAR(250),
                                                    MSGID_PROD VARCHAR(250),
                                                    MSGID_SEQ BIGINT,
                                                    EXPIRATION BIGINT,
                                                    MSG BYTEA, PRIMARY KEY ( ID ) )
                                                </value>

                                                <value>CREATE INDEX ACTIVEMQ_MSGS_MIDX ON ACTIVEMQ_MSGS (MSGID_PROD,MSGID_SEQ)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_XIDX ON ACTIVEMQ_MSGS (XID)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_CIDX ON ACTIVEMQ_MSGS (CONTAINER)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_EIDX ON ACTIVEMQ_MSGS (EXPIRATION)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_PIDX ON ACTIVEMQ_MSGS (PRIORITY)</value>


                                                <value>CREATE TABLE ACTIVEMQ_ACKS
                                                    (CONTAINER VARCHAR(250) NOT NULL,
                                                    SUB_DEST VARCHAR(250),
                                                    CLIENT_ID VARCHAR(250) NOT NULL,
                                                    SUB_NAME VARCHAR(250) NOT NULL,
                                                    SELECTOR VARCHAR(250),
                                                    LAST_ACKED_ID BIGINT,
                                                    PRIORITY BIGINT DEFAULT 5 NOT NULL,
                                                    XID VARCHAR(250),
                                                    PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME,PRIORITY))
                                                </value>
                                                <value>CREATE INDEX ACTIVEMQ_ACKS_XIDX ON ACTIVEMQ_ACKS (XID)</value>

                                            </list>
                                        </property>
                                    </statements>
                                </statements>
                            </jdbcPersistenceAdapter>
                        </persistenceAdapter>


                        <!--
                          The systemUsage controls the maximum amount of space the broker will
                          use before disabling caching and/or slowing down producers. For more information, see:
                          http://activemq.apache.org/producer-flow-control.html

                        <systemUsage>
                            <systemUsage>
                                <memoryUsage>
                                    <memoryUsage percentOfJvmHeap="70"/>
                                </memoryUsage>
                                <storeUsage>
                                    <storeUsage limit="100 gb"/>
                                </storeUsage>
                                <tempUsage>
                                    <tempUsage limit="50 gb"/>
                                </tempUsage>
                            </systemUsage>
                        </systemUsage>
                        -->


                        <!--
                            The transport connectors expose ActiveMQ over a given protocol to
                            clients and other brokers. For more information, see:

                            http://activemq.apache.org/configuring-transports.html
                        -->
                        <transportConnectors>
                            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616"/>
                        </transportConnectors>

                        <!-- destroy the spring context on shutdown to stop jetty -->
                        <shutdownHooks>
                            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
                        </shutdownHooks>

                    </broker>

                    <!--
                        Enable web consoles, REST and Ajax APIs and demos
                        The web consoles requires by default login, you can disable this in the jetty.xml file

                        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
                    -->
                    <import resource="jetty.xml"/>

                </beans>
              run_on: after-add,after-replace,after-update
