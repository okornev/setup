---
variables:

platforms:

# wiredb
  wiredb:
    pack: oneops/postgresql:1
    major_version: 1
    variables:
      dbuser: $OO_GLOBAL{WIREDBUSER}
      dbpass: $OO_GLOBAL{WIREDBPASS}
      dbname: $OO_GLOBAL{WIREDBNAME}
    components:
      secgroup/oneops.1.Secgroup:
        secgroup:
          inbound:
            - '22 22 tcp 0.0.0.0/0'
            - '5432 5432 tcp 0.0.0.0/0'
      compute/oneops.1.Compute:
        compute:
          size: M
          ostype: centos-7.2
      postgresql/oneops.1.Postgresql:
        postgresql:
          version: 9.2
          postgresql_conf:
            tcp_keepalives_count: 5
            tcp_keepalives_idle: 60
            tcp_keepalives_interval: 5
            max_connections: 1000
      database/oneops.1.Database:
        database:
          password: $OO_LOCAL{dbpass}
          dbname: $OO_LOCAL{dbname}
          username: $OO_LOCAL{dbuser}

      lb/oneops.1.Lb:
        lb:
          listeners:
             - tcp 5432 tcp 5432
          ecv_map:
              '5432': GET /NOTUSED

  # wire
  wire:
    pack: oneops/activemq:1
    major_version: 1
    links:
      - wiredb
    variables:
      distbase: $OO_GLOBAL{DISTBASE}
      version: $OO_GLOBAL{VERSION}
      broker-cert-location: /var/lib/certs/broker.ks
      broker-cert-pass: change*me
      adminpass: adminpass
      amqpass: $OO_GLOBAL{AMQPASS}
      dbuser: $OO_GLOBAL{WIREDBUSER}
      dbpass: $OO_GLOBAL{WIREDBPASS}
      dbname: $OO_GLOBAL{WIREDBNAME}
    components:
      secgroup/oneops.1.Secgroup:
        secgroup:
          inbound:
          - 22 22 tcp 0.0.0.0/0
          - 61616 61617 tcp 0.0.0.0/0
          - 8161 8162 tcp 0.0.0.0/0

      compute/oneops.1.Compute:
        compute:
          size: L
          ostype: centos-7.2
      fqdn/oneops.1.Fqdn:
        fqdn:
          aliases:
           - kloopzmq
          ptr_source: platform
          distribution: proximity
      certificate/oneops.1.Certificate:
        broker-cert:
          cacertkey:
          passphrase:
          cert:
          key:
      java/oneops.1.Java:
        java:
          install_dir: /usr/lib/jvm
          jrejdk: server-jre
          version: '8'
      keystore/oneops.1.Keystore:
        broker-keystore:
          keystore_password: 'changeme'
          keystore_filename: $OO_LOCAL{broker-cert-location}
      topic/oneops.1.Topic:
        topic-cms-all:
          topicname: CMS.ALL
      queue/oneops.1.Queue:
        queue-controller-wo:
          queuename: CONTROLLER.WO
        queue-notifications:
          queuename: NOTIFICATIONS
        queue-response:
          queuename: controller.response
        queue-search:
          queuename: search.stream
        queue-sensor-mgmt:
          queuename: sensor-mgmt
      artifact/oneops.1.Artifact:
        amq-artifact:
          repository: Using full RepoURL
          url: $OO_LOCAL{distbase}/oneops-amq-plugin-$OO_LOCAL{version}.tar.gz
          location: $OO_LOCAL{distbase}/oneops-amq-plugin-$OO_LOCAL{version}.tar.gz
          version: $OO_LOCAL{version}
          install_dir: /opt/oneops/artifact
          configure: |-
            execute "cp /opt/oneops/artifact/releases/$OO_LOCAL{version}/oneops/dist/amqplugin-fat.jar /opt/activemq/lib/"
          restart: |-
            service "activemq" do
              action :restart
            end
      activemq/oneops.1.Activemq:
        activemq:
          version: 5.13.2
          brokerauthenabled: 'true'
          maxmemory: '4096'
          adminconsolesecure: 'true'
          initmemory: '4096'
          adminconsolekeystorepassword: $OO_LOCAL{adminpass}
          brokerpassword: $OO_LOCAL{broker-cert-pass}
          adminpassword: 'changeme'
          environment:
            KLOOPZ_AMQ_PASS: $OO_LOCAL{amqpass}
          brokerusername: system
          adminconsolekeystore: $OO_LOCAL{broker-cert-location}
          transportconnector:
            nio: nio://0.0.0.0:61616
            nio+ssl: nio+ssl://0.0.0.0:61617
          authenabled: 'true'
          adminconsoleport: '8162'
          adminusername: admin
          attachments:
            activemq-config:
              path: /opt/activemq/conf/activemq.xml
              exec_cmd: service activemq restart
              priority: '1'
              content: |-
                <!--
                    Licensed to the Apache Software Foundation (ASF) under one or more
                    contributor license agreements.  See the NOTICE file distributed with
                    this work for additional information regarding copyright ownership.
                    The ASF licenses this file to You under the Apache License, Version 2.0
                    (the "License"); you may not use this file except in compliance with
                    the License.  You may obtain a copy of the License at

                    http://www.apache.org/licenses/LICENSE-2.0

                    Unless required by applicable law or agreed to in writing, software
                    distributed under the License is distributed on an "AS IS" BASIS,
                    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    See the License for the specific language governing permissions and
                    limitations under the License.
                -->
                <beans
                  xmlns="http://www.springframework.org/schema/beans"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

                  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                    <property name="locations">
                      <value>file:${activemq.conf}/credentials.properties</value>
                    </property>
                  </bean>

                  <bean id="cmsClient" class="com.oneops.amq.plugins.CMSClient">
                    <property name="restTemplate" ref="restTemplate"/>
                    <property name="serviceUrl" value="http://cmsapi:8080/adapter/rest/"/>
                  </bean>

                 <bean id="postgres-ds" class="org.postgresql.ds.PGPoolingDataSource" destroy-method="close">
                    <property name="serverName" value="wiredb.$OO_GLOBAL{DOMAIN}"/>
                    <property name="databaseName" value="$OO_LOCAL{dbname}"/>
                    <property name="portNumber" value="5432"/>
                    <property name="user" value="$OO_LOCAL{dbuser}"/>
                    <property name="password" value="$OO_LOCAL{dbpass}"/>
                    <property name="dataSourceName" value="postgres"/>
                    <property name="initialConnections" value="5"/>
                    <property name="maxConnections" value="30"/>
                    <property name="tcpKeepAlive" value="true"/>
                </bean>

                  <bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes" value="application/json"/>
                  </bean>

                  <bean class="org.springframework.web.client.RestTemplate" id="restTemplate">
                    <property name="messageConverters">
                      <list>
                        <ref bean="jsonMessageConverter"/>
                      </list>
                    </property>
                  </bean>
                    <!--
                        The <broker> element is used to configure the ActiveMQ broker.
                    -->
                    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="activemq"  dataDirectory="/data"
                     useJmx='true'  advisorySupport='false'   >

                    <destinationInterceptors>
                      <virtualDestinationInterceptor>
                        <virtualDestinations>
                          <compositeTopic name="CMS.ALL" forwardOnly="false">
                            <forwardTo>
                              <filteredDestination selector="source='deployment' OR source='release'" queue="CONTROLLER.WO"/>
                              <filteredDestination selector="source='opsprocedure'" queue="CONTROLLER.AO"/>
                            </forwardTo>
                          </compositeTopic>
                        </virtualDestinations>
                      </virtualDestinationInterceptor>
                    </destinationInterceptors>

                    <destinationPolicy>
                      <policyMap>
                        <policyEntries>
                          <policyEntry topic=">" producerFlowControl="false" memoryLimit="256mb">
                            <pendingSubscriberPolicy>
                              <vmCursor/>
                            </pendingSubscriberPolicy>
                          </policyEntry>
                          <policyEntry queue="CONTROLLER.AO" producerFlowControl="false" usePrefetchExtension="false" prioritizedMessages="true"/>
                          <policyEntry queue="controller.response" producerFlowControl="false" usePrefetchExtension="false" prioritizedMessages="true"/>
                          <policyEntry queue=">" producerFlowControl="false" usePrefetchExtension="false">
                          </policyEntry>
                        </policyEntries>
                      </policyMap>
                    </destinationPolicy>

                   <destinations>
                      <queue physicalName="CONTROLLER.WO"/>
                      <queue physicalName="CONTROLLER.AO"/>
                    </destinations>

                    <managementContext>
                      <managementContext createConnector="false"/>
                    </managementContext>

                        <persistenceAdapter>
                            <jdbcPersistenceAdapter dataSource="#postgres-ds" lockKeepAlivePeriod="5000">
                                <locker>
                                        <lease-database-locker lockAcquireSleepInterval="10000" leaseHolderId="${ONEOPS_COMPUTE_CI_ID}"/>
                                </locker>
                                <statements>
                                    <statements>
                                        <property xmlns="http://www.springframework.org/schema/beans" name="createSchemaStatements">
                                            <list>
                                                <value>CREATE TABLE ACTIVEMQ_MSGS
                                                    (ID BIGINT NOT NULL,
                                                    PRIORITY BIGINT,
                                                    XID VARCHAR(250),
                                                    CONTAINER VARCHAR(250),
                                                    MSGID_PROD VARCHAR(250),
                                                    MSGID_SEQ BIGINT,
                                                    EXPIRATION BIGINT,
                                                    MSG BYTEA, PRIMARY KEY ( ID ) )
                                                </value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_MIDX ON ACTIVEMQ_MSGS (MSGID_PROD,MSGID_SEQ)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_XIDX ON ACTIVEMQ_MSGS (XID)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_CIDX ON ACTIVEMQ_MSGS (CONTAINER)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_EIDX ON ACTIVEMQ_MSGS (EXPIRATION)</value>
                                                <value>CREATE INDEX ACTIVEMQ_MSGS_PIDX ON ACTIVEMQ_MSGS (PRIORITY)</value>
                                                <value>CREATE TABLE ACTIVEMQ_ACKS
                                                    (CONTAINER VARCHAR(250) NOT NULL,
                                                    SUB_DEST VARCHAR(250),
                                                    CLIENT_ID VARCHAR(250) NOT NULL,
                                                    SUB_NAME VARCHAR(250) NOT NULL,
                                                    SELECTOR VARCHAR(250),
                                                    LAST_ACKED_ID BIGINT,
                                                    PRIORITY BIGINT DEFAULT 5 NOT NULL,
                                                    XID VARCHAR(250),
                                                    PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME,PRIORITY))
                                                </value>
                                                <value>CREATE INDEX ACTIVEMQ_ACKS_XIDX ON ACTIVEMQ_ACKS (XID)</value>
                                            </list>
                                        </property>
                                    </statements>
                                </statements>
                            </jdbcPersistenceAdapter>
                        </persistenceAdapter>

                    <sslContext>
                      <sslContext keyStore="$OO_LOCAL{broker-cert-location}" keyStorePassword="$OO_LOCAL{broker-cert-pass}"/>
                    </sslContext>

                    <plugins>
                      <bean xmlns="http://www.springframework.org/schema/beans" id="authorizationPlugin" class="com.oneops.amq.plugins.OneopsAuthPlugin">
                        <property name="cms" ref="cmsClient"/>
                      </bean>
                    </plugins>
                        <!--
                            The transport connectors expose ActiveMQ over a given protocol to
                            clients and other brokers. For more information, see:

                            http://activemq.apache.org/configuring-transports.html
                        -->
                        <transportConnectors>
                                <transportConnector name='nio' uri='nio://0.0.0.0:61616' />
                                <transportConnector name='nio+ssl' uri='nio+ssl://0.0.0.0:61617' />
                        </transportConnectors>

                        <!-- destroy the spring context on shutdown to stop jetty -->
                        <shutdownHooks>
                            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
                        </shutdownHooks>
                    </broker>
                    <!--
                        Enable web consoles, REST and Ajax APIs and demos
                        The web consoles requires by default login, you can disable this in the jetty.xml file
                        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
                    -->
                    <import resource="jetty.xml"/>
                </beans>
              run_on: after-add,after-replace,after-update
